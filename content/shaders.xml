<shaders>
    <shader name="SleeperEtAl">
		<parameters>
			<param name="ActiveIn" type="float"/>
			<param name="TargetPositionOne" type="vec4"/>
            <param name="TargetPositionTwo" type="vec4"/>
            <param name="FadePositions" type="vec4"/>
            <param name="WarpCheck" type="vec2"/>
            <param name="RandomIn" type="float"/>
            <param name="ColorPulseIn" type="float"/>
		</parameters>
        <vertex><![CDATA[
attribute vec3 Position;
attribute vec4 Color;
attribute vec2 TexCoord;
attribute vec4 RenderData;
attribute float Scale;

varying vec4 Color0;
varying vec2 TexCoord0;
varying vec4 RenderDataOut;
varying float ScaleOut;

attribute float ActiveIn;
varying float Active;

attribute vec4 TargetPositionOne;
attribute vec4 TargetPositionTwo;
varying vec4 TargetPositions;

attribute vec4 FadePositions;
varying vec4 Distance;

attribute vec2 WarpCheck;
varying float YWarping;

attribute float RandomIn;
varying float Random;

attribute float ColorPulseIn;
varying float ColorPulse;

uniform mat4 Transform;
void main(void) {
    RenderDataOut = RenderData;
    Color0 = Color;
    TexCoord0 = TexCoord;

    gl_Position = Transform * vec4(Position.xyz, 1.0);

    Active = ActiveIn;
    Random = RandomIn;
    ColorPulse = ColorPulseIn;

    if (Active > 0.0 && Active < 1.1) {
        vec4 TargetPosOne;
        TargetPosOne.xy = (TargetPositionOne.xy / RenderData.zw) * Scale;
        TargetPosOne.zw = (TargetPositionOne.zw / RenderData.zw) * Scale;

        vec4 TargetPosTwo;
        TargetPosTwo.xy = (TargetPositionTwo.xy / RenderData.zw) * Scale;
        TargetPosTwo.zw = (TargetPositionTwo.zw / RenderData.zw) * Scale;

        vec4 FixedFadePositions;
        FixedFadePositions.xy = (FadePositions.xy / RenderData.zw) * Scale;
        FixedFadePositions.zw = (FadePositions.zw / RenderData.zw) * Scale;

        TargetPositions.xy = TargetPosOne.xy;
        TargetPositions.zw = TargetPosTwo.xy;

        Distance.x = distance(TargetPosOne.xy, TargetPosOne.zw);
        Distance.y = distance(TargetPosTwo.xy, TargetPosTwo.zw);
        Distance.z = distance(TargetPosOne.xy, FixedFadePositions.xy);
        Distance.w = distance(TargetPosTwo.xy, FixedFadePositions.zw);

        vec2 WarpChecker = (WarpCheck.xy / RenderData.zw) * Scale;
        float xDistance = distance(vec2(WarpChecker.x, TargetPosOne.y), TargetPosOne.xy);
        float yDistance = distance(vec2(TargetPosOne.x, WarpChecker.y), TargetPosOne.xy);
        YWarping = xDistance / yDistance;
    }
}
      ]]></vertex>
      <fragment><![CDATA[
varying vec4 Color0;
varying vec2 TexCoord0;
varying vec4 RenderDataOut;
varying float ScaleOut;
uniform sampler2D Texture0;

varying float Active;
varying vec4 TargetPositions;
varying vec4 Distance;
varying float Random;
varying float ColorPulse;
varying float YWarping;

// Noise generator I'm using for RNG

//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
//

vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
           -0.577350269189626,  // -1.0 + 2.0 * C.x
            0.024390243902439); // 1.0 / 41.0
    // First corner
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);

    // Other corners
    vec2 i1;
    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
    //i1.y = 1.0 - i1.x;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    // x0 = x0 - 0.0 + 0.0 * C.xx ;
    // x1 = x0 - i1 + 1.0 * C.xx ;
    // x2 = x0 - 1.0 + 2.0 * C.xx ;
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
    + i.x + vec3(0.0, i1.x, 1.0 ));

    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
    m = m*m ;
    m = m*m ;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

    // Compute final noise value at P
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

vec2 NoisePixelation = vec2(0.001, 0.001);

float MinNoiseBrightness = 0.12;
float MaxNoiseBrightness = 1.0;
float MinNoiseStrength = 0.05;
float MaxNoiseStrength = 1.0;

float warpedDistance(vec2 a, vec2 b) {
    vec2 diff = a - b;
    float distanceSquared = (diff.x * diff.x) + (diff.y * diff.y * YWarping * YWarping);
    return sqrt(distanceSquared);
}

void main(void) {
    vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
    if (Active > 1.4 && Active < 1.6) {
        gl_FragColor = vec4(0, 0, 0, 1);
    } else if (Active > 1.7 && Active < 1.8) {
        gl_FragColor = vec4(Color.r * 0.9, Color.gb * 0.7, Color.a);
    } else if (Active > 0.0001 && Active < 1.1) {
        float distA = warpedDistance(TexCoord0, TargetPositions.xy);
        float distB = warpedDistance(TexCoord0, TargetPositions.zw);
        float brightness = MaxNoiseBrightness; // How light / dark the noise is
        float noiseStrength = MinNoiseStrength; // How much the noise is used over the actual color
        if (distA > Distance.x && distB > Distance.y) { // Not within range of either circle, use full dark
            brightness = MinNoiseBrightness;
            noiseStrength = MaxNoiseStrength;
        } else if (distA > Distance.z && distB > Distance.w) { // Within range of the outer circles, but not the inner circle, interpolate to dark
            float percent = 2.0;
            if (distA < Distance.x) {
                float percentA = (distA - Distance.z) / (Distance.x - Distance.z);
                percent = min(percent, percentA);
            };
            if (distB < Distance.y) {
                float percentB = (distB - Distance.w) / (Distance.y - Distance.w);
                percent = min(percent, percentB);
            };

            if (percent != 2.0) {
                percent = pow(1.0 - percent, 2.0);
                percent = 1.0 - percent;
                brightness = mix(MaxNoiseBrightness, MinNoiseBrightness, percent);
                noiseStrength = mix(MinNoiseStrength, MaxNoiseStrength, percent);
            };
        };

        vec2 NoiseUV = TexCoord0 + vec2(Random, Random);
        NoiseUV -= mod(NoiseUV, NoisePixelation);
        float noise = snoise(NoiseUV * 1000.0) * brightness;

        float desaturated = (min(Color.r, min(Color.g, Color.b)) + max(Color.r, max(Color.g, Color.b))) * 0.5; // Change all colors towards avg of min and max color, approximates desaturation
        desaturated *= 0.75; // Darken
        Color = mix(Color, vec4(desaturated, desaturated, desaturated, Color.a), Active * 0.66);
        Color = mix(Color, vec4(Color.r * 0.9, Color.gb * 0.2, Color.a), ColorPulse * Active); // Darken non-red extra to make red stand out
        gl_FragColor = mix(Color, vec4(noise, noise, noise, 1.0), noiseStrength * Active);
    } else {
        gl_FragColor = Color;
    };
}
      ]]></fragment>
    </shader>
</shaders>
